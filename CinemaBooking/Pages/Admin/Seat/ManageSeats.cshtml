@page
@model CinemaBooking.Pages.Admin.Seat.ManageSeatsModel
@{
    Layout = "/Pages/Shared/_AdminLayout.cshtml";
    ViewData["Title"] = "Add Multiple Seats";
}
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0">
    <title>Create New Seats</title>
    <link rel="stylesheet" type="text/css" href="~/admin/assets/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="~/admin/assets/css/style.css">
    <style>
        .seat-layout-wrapper {
            display: flex;
            justify-content: center; /* Center the entire seat layout horizontally */
            margin-top: 20px;
        }

        #seatLayout {
            display: flex;
            flex-direction: column; /* Stack rows vertically */
        }

        .seat-row {
            display: flex; /* Use flexbox for row layout */
            justify-content: center; /* Center seats within each row */
            margin-bottom: 8px; /* Spacing between rows */
        }

        .seat {
            width: 55px; /* Increased width for each seat */
            height: 55px; /* Increased height for each seat */
            border: 1px solid #333; /* Solid border for each seat */
            display: flex;
            flex-direction: column; /* Stack seat number and type vertically */
            justify-content: center; /* Center the seat text */
            align-items: center; /* Center the seat text vertically */
            margin-right: 8px; /* Space between seats */
            font-size: 12px; /* Slightly larger font size */
            cursor: pointer; /* Show pointer cursor for clickable seats */
            border-radius: 6px; /* Slightly rounded corners for seats */
            padding: 3px; /* Add padding for more breathing space */
            text-align: center; /* Center align text within the seat */
        }

            .seat.empty {
                background-color: transparent; /* Transparent background for empty seats */
                border: 1px dashed #ccc; /* Dashed border to indicate empty seats */
            }

            .seat.available {
                background-color: lightgreen;
                border: 2px solid #33cc33;
                color: black;
                font-weight: bold;
            }

            .seat.unavailable {
                background-color: red;
                border: 2px solid #ff3333;
                color: black;
                font-weight: bold;
            }

        .seat-row::before {
            content: attr(data-row); /* Display row label (A, B, C, etc.) */
            display: inline-block;
            width: 30px;
            text-align: center;
            margin-right: 10px;
            font-weight: bold;
            font-size: 14px; /* Adjusted font size for row label */
        }

        .seat.selected {
            background-color: #ffcc00;
            border: 2px solid #ff9900;
        }

        .seat:hover {
            opacity: 0.9; /* Reduced hover effect for a cleaner look */
        }

    </style>
</head>
<body>
    <div class="container mt-5">
        <h4 class="page-title">Add Multiple Seats to Room</h4>

        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                <strong>Please correct the following errors:</strong>
                <ul>
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <li>@error.ErrorMessage</li>
                    }
                </ul>
            </div>
        }

        <form method="post">
            @Html.AntiForgeryToken()

            <div class="form-group">
                <label asp-for="RoomId">Room</label>
                <select class="form-control" asp-for="RoomId" required>
                    <option value="">Select Room</option>
                    @foreach (var room in Model.Rooms)
                    {
                        <option value="@room.RoomId">@room.RoomName</option>
                    }
                </select>
                <span asp-validation-for="RoomId" class="text-danger"></span>
            </div>

            <!-- Seats Input Section -->
            <div id="seatsInputSection">
                <!-- New ID for the entire seats section -->
                <h5>Seats</h5>
                <div id="seatsContainer">
                    <div class="form-row seat-row mb-2">
                        <input type="text" name="Seats[0].Row" placeholder="Row" class="form-control col-md-2 mr-1" required />
                        <input type="number" name="Seats[0].Column" placeholder="Column" class="form-control col-md-2 mr-1" required />
                        <select name="Seats[0].SeatTypeId" class="form-control col-md-3 mr-1" required>
                            <option value="">Seat Type</option>
                            @foreach (var type in Model.SeatTypes)
                            {
                                <option value="@type.SeatTypeId">@type.SeatTypeName</option>
                            }
                        </select>
                        <select name="Seats[0].Status" class="form-control col-md-2 mr-1" required>
                            <option value="0">Available</option>
                            <option value="1">Unavailable</option>
                        </select>
                        <button type="button" class="btn btn-danger remove-seat-row">Remove</button>
                    </div>
                </div>

                <button type="button" id="addSeatBtn" class="btn btn-secondary mt-2">Add Seat</button>
                <button type="submit" class="btn btn-primary mt-2">Save Seats</button>
            </div>
        </form>

        <!-- Modal for Seat Details -->
        <div class="modal fade" id="seatDetailsModal" tabindex="-1" role="dialog" aria-labelledby="seatDetailsModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="seatDetailsModalLabel">Seat Details</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form id="seatDetailsForm">
                            <div class="form-group">
                                <label for="seatRow">Row</label>
                                <input type="text" id="seatRow" class="form-control" readonly />
                            </div>
                            <div class="form-group">
                                <label for="seatColumn">Column</label>
                                <input type="number" id="seatColumn" class="form-control" readonly />
                            </div>
                            <div class="form-group">
                                <label for="seatStatus">Status</label>
                                <select id="seatStatus" class="form-control">
                                    <option value="0">Available</option>
                                    <option value="1">Unavailable</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="seatType">Seat Type</label>
                                <select id="seatType" class="form-control">
                                    <option value="">Select Seat Type</option>
                                    @foreach (var type in Model.SeatTypes)
                                    {
                                        <option value="@type.SeatTypeId">@type.SeatTypeName</option>
                                    }
                                </select>
                            </div>
                            <div class="form-group">
                                <button type="button" class="btn btn-primary" id="saveSeatBtn">Save</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <div id="seatLayout" class="mt-3">
            <!-- Seats will be dynamically populated here -->
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const roomSelect = document.querySelector('select[name="RoomId"]');
            const layoutContainer = document.getElementById('seatLayout');
            const seatsInputSection = document.getElementById('seatsInputSection'); // New ID for the seat input section
            const saveSeatBtn = document.getElementById('saveSeatBtn');
            let seatIndex = 1;

            // Function to load and render seat layout based on selected room
            function loadSeatLayout() {
                const roomId = roomSelect.value;
                if (roomId) {
                    fetch(`/Admin/Seat/ManageSeats?handler=RoomDetails&roomId=${roomId}`)
                        .then(response => response.json())
                        .then(roomDetails => {
                            // Check if room status is Available
                            if (roomDetails.status === 0) { // Assuming 0 is Available
                                seatsInputSection.style.display = 'none'; // Hide Seats input section
                                alert("Only view access is allowed. Editing and adding seats are disabled when room status is 'Available'.");
                            } else {
                                seatsInputSection.style.display = 'block'; // Show Seats input section
                            }

                            const maxRows = roomDetails.numberOfRow;
                            const maxColumns = roomDetails.numberOfColumn;
                            layoutContainer.innerHTML = ""; // Clear the current layout

                            fetch(`/Admin/Seat/ManageSeats?handler=Seats&roomId=${roomId}`)
                                .then(response => response.json())
                                .then(data => {
                                    const seatMap = {};

                                    data.forEach(seat => {
                                        const row = seat.row.toUpperCase();
                                        const column = seat.column;
                                        if (!seatMap[row]) {
                                            seatMap[row] = {};
                                        }
                                        seatMap[row][column] = seat;
                                    });

                                    // Render seat layout
                                    for (let i = 0; i < maxRows; i++) {
                                        const rowLetter = String.fromCharCode(65 + i);
                                        const rowDiv = document.createElement('div');
                                        rowDiv.className = 'seat-row';

                                        for (let j = 1; j <= maxColumns; j++) {
                                            const seat = seatMap[rowLetter] && seatMap[rowLetter][j];
                                            const seatDiv = document.createElement('div');
                                            seatDiv.className = 'seat';
                                            seatDiv.setAttribute('data-row', rowLetter);
                                            seatDiv.setAttribute('data-column', j);

                                            if (seat) {
                                                seatDiv.classList.add(seat.status === 0 ? 'available' : 'unavailable');
                                                seatDiv.innerText = `${rowLetter}${j}\n${seat.type}`;
                                                seatDiv.addEventListener('click', function () {
                                                    document.getElementById('seatRow').value = rowLetter;
                                                    document.getElementById('seatColumn').value = j;
                                                    document.getElementById('seatStatus').value = seat.status;
                                                    document.getElementById('seatType').value = seat.seatTypeId;

                                                    if (roomDetails.status === 0) { // View-only mode if Available
                                                        document.getElementById('seatStatus').disabled = true;
                                                        document.getElementById('seatType').disabled = true;
                                                        saveSeatBtn.style.display = 'none'; // Hide Save button in modal
                                                    } else { // Enable editing if Unavailable
                                                        document.getElementById('seatStatus').disabled = false;
                                                        document.getElementById('seatType').disabled = false;
                                                        saveSeatBtn.style.display = 'block'; // Show Save button
                                                    }

                                                    $('#seatDetailsModal').modal('show');
                                                });
                                            } else {
                                                seatDiv.classList.add('empty');
                                                seatDiv.innerText = '';
                                            }

                                            rowDiv.appendChild(seatDiv);
                                        }
                                        layoutContainer.appendChild(rowDiv);
                                    }
                                })
                                .catch(error => console.error('Error fetching seats:', error));
                        })
                        .catch(error => console.error('Error fetching room details:', error));
                } else {
                    layoutContainer.innerHTML = "";
                }
            }

            // Load seat layout when a room is selected
            roomSelect.addEventListener('change', loadSeatLayout);

            // Function to save seat in edit modal and reload layout
            function saveSeat() {
                const row = document.getElementById('seatRow').value.trim();
                const column = document.getElementById('seatColumn').value;
                const status = document.getElementById('seatStatus').value;
                const seatTypeId = document.getElementById('seatType').value;
                const roomId = roomSelect.value;
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                if (!row || isNaN(column) || isNaN(status) || isNaN(seatTypeId) || isNaN(roomId)) {
                    alert("Please make sure all fields are correctly filled out.");
                    return;
                }

                const formData = new FormData();
                formData.append('roomId', roomId);
                formData.append('row', row);
                formData.append('column', column);
                formData.append('status', status);
                formData.append('seatTypeId', seatTypeId);
                formData.append('__RequestVerificationToken', token);

                fetch('/Admin/Seat/ManageSeats?handler=UpdateSeat', {
                    method: 'POST',
                    body: formData
                })
                    .then(response => response.json())
                    .then(result => {
                        if (result && result.success) {
                            $('#seatDetailsModal').modal('hide');
                            alert(result.message || 'Seat updated successfully!');
                            loadSeatLayout(); // Reload seat layout after successful update
                        } else {
                            alert(result.message || 'An unexpected error occurred.');
                        }
                    })
                    .catch(error => {
                        console.error('Fetch error:', error);
                        alert('An error occurred while updating the seat. Please try again.');
                    });
            }

            // Attach save functionality to Save button in edit modal
            saveSeatBtn.addEventListener('click', saveSeat);

            // Function to add a new row for seat entry in the form
            function addNewSeatRow() {
                const container = document.getElementById('seatsContainer');
                const newRow = document.createElement('div');
                newRow.classList.add('form-row', 'seat-row', 'mb-2');
                newRow.innerHTML = `
                        <input type="text" name="Seats[${seatIndex}].Row" placeholder="Row" class="form-control col-md-2 mr-1" required />
                        <input type="number" name="Seats[${seatIndex}].Column" placeholder="Column" class="form-control col-md-2 mr-1" required />
                        <select name="Seats[${seatIndex}].SeatTypeId" class="form-control col-md-3 mr-1" required>
                            <option value="">Seat Type</option>
        @foreach (var type in Model.SeatTypes)
        {
                                    <option value="@type.SeatTypeId">@type.SeatTypeName</option>
        }
                        </select>
                        <select name="Seats[${seatIndex}].Status" class="form-control col-md-2 mr-1" required>
                            <option value="0">Available</option>
                            <option value="1">Unavailable</option>
                        </select>
                        <button type="button" class="btn btn-danger remove-seat-row">Remove</button>`;
                container.appendChild(newRow);
                seatIndex++;
            }

            // Attach add new row functionality to the Add Seat button
            addSeatBtn.addEventListener('click', addNewSeatRow);

            // Remove seat row functionality
            document.addEventListener('click', function (e) {
                if (e.target && e.target.classList.contains('remove-seat-row')) {
                    e.target.closest('.seat-row').remove();
                }
            });

            // Close modal on close button click
            $('.close').on('click', function () {
                $('#seatDetailsModal').modal('hide');
            });
        });
    </script>
</body>
</html>
