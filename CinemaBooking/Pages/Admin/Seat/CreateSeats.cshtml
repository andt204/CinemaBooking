@page
@model CinemaBooking.Pages.Admin.Seat.CreateSeatsModel
@{
    Layout = "/Pages/Shared/_AdminLayout.cshtml";
    ViewData["Title"] = "Add Multiple Seats";
}
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0">
    <title>Create New Seats</title>
    <link rel="stylesheet" type="text/css" href="~/admin/assets/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="~/admin/assets/css/style.css">
    <style>
        .seat-row {
            display: flex; /* Use flexbox for layout */
            margin-bottom: 5px; /* Spacing between rows */
        }

        .seat {
            border: 1px solid #000; /* Border for each seat */
            padding: 5px; /* Padding around seat text */
            margin-right: 5px; /* Spacing between seats */
            width: 50px; /* Fixed width for seats */
            text-align: center; /* Center the text */
        }

            .seat.empty {
                background-color: transparent; /* Or any color you want for empty seats */
                border: 1px dashed #ccc; /* Example border to show empty seats */
            }

    </style>
</head>
<body>
    <div class="container mt-5">
        <h4 class="page-title">Add Multiple Seats to Room</h4>

        @* Display ModelState errors *@
        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                <strong>Please correct the following errors:</strong>
                <ul>
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <li>@error.ErrorMessage</li>
                    }
                </ul>
            </div>
        }

        <form method="post">
            @Html.AntiForgeryToken()

            <!-- Select Room Dropdown -->
            <div class="form-group">
                <label asp-for="RoomId">Room</label>
                <select class="form-control" asp-for="RoomId" required>
                    <option value="">Select Room</option>
                    @foreach (var room in Model.Rooms)
                    {
                        <option value="@room.RoomId">@room.RoomName</option>
                    }
                </select>
                <span asp-validation-for="RoomId" class="text-danger"></span>
            </div>

            <!-- Seats Container for Dynamic Rows -->
            <div id="seatsContainer">
                <h5>Seats</h5>
                <div class="form-row seat-row mb-2">
                    <input type="text" name="Seats[0].Row" placeholder="Row" class="form-control col-md-2 mr-1" required />
                    <input type="number" name="Seats[0].Column" placeholder="Column" class="form-control col-md-2 mr-1" required />
                    <select name="Seats[0].SeatTypeId" class="form-control col-md-3 mr-1" required>
                        <option value="">Seat Type</option>
                        @foreach (var type in Model.SeatTypes)
                        {
                            <option value="@type.SeatTypeId">@type.SeatTypeName</option>
                        }
                    </select>
                    <select name="Seats[0].Status" class="form-control col-md-2 mr-1" required>
                        <option value="0">Available</option>
                        <option value="1">Unavailable</option>
                    </select>
                    <button type="button" class="btn btn-danger remove-seat-row">Remove</button>
                </div>
            </div>

            <button type="button" id="addSeatBtn" class="btn btn-secondary mt-2">Add Seat</button>
            <button type="submit" class="btn btn-primary mt-2">Save Seats</button>
        </form>
        <div id="seatLayout" class="mt-3">
            <!-- Seats will be dynamically populated here -->
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const roomSelect = document.querySelector('select[name="RoomId"]');
            const layoutContainer = document.getElementById('seatLayout');
            let seatIndex = 1; // Initialize seat index

            roomSelect.addEventListener('change', function () {
                const roomId = this.value;
                if (roomId) {
                    console.log("Fetching seats for room ID:", roomId);
                    // Add this inside the fetch function to replace the previous code
                    fetch(`/Admin/Seat/CreateSeats?handler=Seats&roomId=${roomId}`)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(data => {
                            layoutContainer.innerHTML = ""; // Clear previous layout

                            // Create an object to hold seats by row
                            const seatMap = {};

                            // Populate the seat map based on row and column
                            data.forEach(seat => {
                                const row = seat.row.toUpperCase(); // Ensure the row is uppercase
                                const column = seat.column;
                                if (!seatMap[row]) {
                                    seatMap[row] = {}; // Create an object for the row if it doesn't exist
                                }
                                seatMap[row][column] = seat; // Map the seat by row and column
                            });

                            // Assuming you know the max number of rows and columns
                            const maxRows = 20; // Adjust this based on your requirements
                            const maxColumns = 0; // Adjust this based on your requirements

                            // Create the seat layout in the desired format
                            for (let i = 0; i < maxRows; i++) {
                                const rowLetter = String.fromCharCode(65 + i); // Convert to A, B, C...
                                const rowDiv = document.createElement('div'); // Create a div for each row
                                rowDiv.className = 'seat-row'; // Add a class for styling

                                for (let j = 1; j <= maxColumns; j++) {
                                    const seat = seatMap[rowLetter] && seatMap[rowLetter][j];
                                    const seatDiv = document.createElement('div');
                                    seatDiv.className = 'seat'; // Add the seat class for styling

                                    // Check if the seat exists in the fetched data
                                    if (seat) {
                                        // If the seat exists in the fetched data
                                        seatDiv.classList.add(seat.status === 0 ? 'available' : 'unavailable');
                                        seatDiv.innerText = `Row ${rowLetter}, Col ${j}`; // Display seat info
                                    } else {
                                        // If the seat does not exist, keep it empty
                                        seatDiv.classList.add('empty'); // Class for empty seats
                                        seatDiv.innerText = ''; // Leave empty for seats that don't exist
                                    }

                                    rowDiv.appendChild(seatDiv); // Append the seat to the row
                                }

                                layoutContainer.appendChild(rowDiv); // Append the row to the layout container
                            }
                        })
                        .catch(error => {
                            console.error('There was a problem with the fetch operation:', error);
                        });



                } else {
                    layoutContainer.innerHTML = ""; // Clear layout if no room is selected
                }
            });

            // Add a new row for seat entry
            document.getElementById('addSeatBtn').addEventListener('click', function () {
                const container = document.getElementById('seatsContainer');
                const newRow = document.createElement('div');
                newRow.classList.add('form-row', 'seat-row', 'mb-2');
                newRow.innerHTML = `
                        <input type="text" name="Seats[${seatIndex}].Row" placeholder="Row" class="form-control col-md-2 mr-1" required />
                        <input type="number" name="Seats[${seatIndex}].Column" placeholder="Column" class="form-control col-md-2 mr-1" required />
                        <select name="Seats[${seatIndex}].SeatTypeId" class="form-control col-md-3 mr-1" required>
                            <option value="">Seat Type</option>
        @foreach (var type in Model.SeatTypes)
        {
                                    <option value="@type.SeatTypeId">@type.SeatTypeName</option>
        }
                        </select>
                        <select name="Seats[${seatIndex}].Status" class="form-control col-md-2 mr-1" required>
                            <option value="0">Available</option>
                            <option value="1">Unavailable</option>
                        </select>
                        <button type="button" class="btn btn-danger remove-seat-row">Remove</button>`;
                container.appendChild(newRow);
                seatIndex++; // Increment seat index for the next row

                // Update seat layout after adding a new seat row
                updateSeatLayout();
            });

            document.addEventListener('click', function (e) {
                if (e.target && e.target.classList.contains('remove-seat-row')) {
                    e.target.closest('.seat-row').remove();
                    updateSeatLayout(); // Update layout after removing a seat
                }
            });
        });
    </script>

</body>
</html>
