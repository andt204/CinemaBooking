@page
@using CinemaBooking.Enum
@model CinemaBooking.Pages.Customer.CinemaSelection.SeatSelectionModel
@{
    Layout = "/Pages/Shared/_UserLayout1.cshtml";
    ViewData["Title"] = "Cinema Selection";
}
<!DOCTYPE html>
<html lang="zxx">

<head>
    <title>Movie Seat Selection Flat Responsive Widget Template :: w3layouts</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="utf-8">
    <meta name="keywords" content="Movie Seat Selection a Responsive Web Template, Bootstrap Web Templates, Flat Web Templates, Android Compatible Web Template, Smartphone Compatible Web Template, Free Webdesigns for Nokia, Samsung, LG, Sony Ericsson, Motorola Web Design">
    <link rel="stylesheet" href="~/customer/seat-selection-assets/css/style.css" type="text/css" media="all">
    <link href="//fonts.googleapis.com/css?family=Source+Sans+Pro:200,200i,300,300i,400,400i,600,600i,700,700i,900,900i" rel="stylesheet">
    <style>
        .seats {
            display: none; /* Hide default checkbox */
        }

        .checkmark {
            width: 20px;
            height: 20px;
            background-color: #eee;
            border-radius: 5px; /* Optional: rounded corners */
            display: inline-block; /* Inline block to allow space beside text */
            position: relative; /* For the checkmark positioning */
            cursor: pointer; /* Pointer cursor on hover */
        }

        /* Checkmark appearance when checked */
        .seats:checked + .checkmark {
            background-color: #28a745; /* Green background for selected */
        }

        /* Adding styles for reserved or unavailable seats */
        .unavailable + .checkmark {
            background-color: yellow; /* Yellow for unavailable */
        }

        .reserved + .checkmark {
            background-color: red; /* Red for reserved */
        }

        /* Optional: Change cursor for unavailable seats */
        .unavailable + .checkmark,
        .reserved + .checkmark {
            cursor: not-allowed; /* Not-allowed cursor */
        }

        /* Style for seat labels */
        .checkbox-label {
            margin-left: 5px; /* Space between checkbox and text */
            font-weight: bold; /* Make the text bold */
            color: #333; /* Change label color */
        }
    </style>
</head>

<body>
    <h1>Movie Seat Selection</h1>
    <div class="container">
        <div class="w3ls-reg">
            <div class="inputForm">
                <h2>Fill the required details below and select your seats</h2>
                <div class="mr_agilemain">
                    <div class="agileits-left">
                        <label>
                            Name
                            <span>*</span>
                        </label>
                        <input type="text" id="Username" required>
                    </div>
                    <div class="agileits-right">
                        <label>
                            Number of Seats
                            <span>*</span>
                        </label>
                        <input type="number" id="Numseats" required min="1">
                    </div>
                </div>
                <button id="startSelectingBtn">Start Selecting</button>
            </div>
            <ul class="seat_w3ls">
                <li class="smallBox greenBox">Selected Seat</li>
                <li class="smallBox redBox">Reserved Seat</li>
                <li class="smallBox emptyBox">Empty Seat</li>
            </ul>
            <div class="seatStructure txt-center" style="overflow-x:auto;">
                @{
                    var rowLabels = Enumerable.Range(0, Model.Showtime.Room.RoomType.NumberOfRow)
                    .Select(i => ((char)('A' + i)).ToString())
                    .ToArray();
                }

                <table id="seatsBlock">
                    <p id="notification"></p>
                    <tr>
                        <td></td>
                        @for (int i = 1; i <= Model.Showtime.Room.RoomType.NumberOfColumn; i++)
                        {
                            <td>@i</td>
                        }
                    </tr>

                    @foreach (var row in rowLabels)
                    {
                        <tr>
                            <td>@row</td>
                            @for (int column = 1; column <= Model.Showtime.Room.RoomType.NumberOfColumn; column++)
                            {
                                var seat = Model.Showtime.Room.Seats.FirstOrDefault(s => s.Row == row && s.Column == column);

                                var checkboxColor = seat?.Status switch
                                {
                                    SeatStatus.Available => "white",
                                    SeatStatus.Unavailable => "yellow",
                                    SeatStatus.Reserved => "red",
                                    _ => "white"
                                };

                                var checkboxDisabled = seat?.Status != SeatStatus.Available ? "disabled" : "";
                                var pointerEvents = seat?.Status != SeatStatus.Available ? "pointer-events: none;" : "";

                                <td style="text-align: center;">
                                    <!-- Centering the checkbox and text -->
                                    <input type="checkbox" class="cinema-seats" value="@seat?.SeatId" @checkboxDisabled
                                           title="Seat Status: @(seat?.Status)" style="display: none;" data-row="@row" data-column="@column">
                                    <span class="checkmark" style="background-color: @(checkboxColor); cursor: pointer;"></span>

                                </td>
                            }
                        </tr>
                    }

                </table>

                <div class="screen">
                    <h2 class="wthree">Screen this way</h2>
                </div>
                <button id="confirmSelectionBtn">Confirm Selection</button>
            </div>
            <div class="displayerBoxes txt-center" style="overflow-x:auto;">
                <table class="Displaytable w3ls-table" width="100%">
                    <tr>
                        <th>Name</th>
                        <th>Number of Seats</th>
                        <th>Seats</th>
                    </tr>
                    <tr>
                        <td>
                            <textarea id="nameDisplay" readonly></textarea>
                        </td>
                        <td>
                            <textarea id="NumberDisplay" readonly></textarea>
                        </td>
                        <td>
                            <textarea id="seatsDisplay" readonly></textarea>
                        </td>
                    </tr>
                </table>
                <a href="/Customer/Payment/Payment">Submit</a>
            </div>
        </div>
    </div>

    <script>
document.addEventListener("DOMContentLoaded", function () {
    const startSelectingBtn = document.getElementById("startSelectingBtn");
    const seatsBlock = document.getElementById("seatsBlock");
    const selectedSeats = new Set(); // Use a Set to store unique selected seat IDs

    startSelectingBtn.addEventListener("click", function () {
        const username = document.getElementById("Username").value;
        const numSeats = parseInt(document.getElementById("Numseats").value);

        if (!username || isNaN(numSeats) || numSeats < 1) {
            alert("Please enter a valid name and number of seats.");
            return;
        }

        // Show checkboxes and enable selection
        const checkboxes = document.querySelectorAll(".cinema-seats");
        checkboxes.forEach(checkbox => {
            checkbox.style.display = "inline-block"; // Show checkbox
            checkbox.disabled = false; // Enable checkbox
        });

        // Add event listener to seatsBlock for event delegation
        seatsBlock.addEventListener("change", function (event) {
            if (event.target.classList.contains("cinema-seats")) {
                const seatId = event.target.value;
                if (event.target.checked) {
                    selectedSeats.add(seatId); // Add selected seat
                } else {
                    selectedSeats.delete(seatId); // Remove unselected seat
                }
                updateSeatDisplay();
            }
        });
    });

    function updateSeatDisplay() {
        const checkboxes = document.querySelectorAll(".cinema-seats");
        checkboxes.forEach(checkbox => {
            const checkmark = checkbox.nextElementSibling; // Get corresponding checkmark
            if (checkbox.checked) {
                checkmark.style.backgroundColor = "#28a745"; // Green for selected seats
            } else {
                const seatStatus = checkbox.title.split(": ")[1].trim(); // Get seat status
                checkmark.style.backgroundColor = seatStatus === "Available" ? "white" :
                    seatStatus === "Reserved" ? "red" :
                    seatStatus === "Unavailable" ? "yellow" :
                    "white"; // Set color based on status
            }
        });

        // Update seat display
        document.getElementById("nameDisplay").value = document.getElementById("Username").value;
        document.getElementById("NumberDisplay").value = selectedSeats.size; // Use size of Set
        document.getElementById("seatsDisplay").value = Array.from(selectedSeats).join(", "); // Convert Set to array for display
    }
});
</script>



</body>

</html>
