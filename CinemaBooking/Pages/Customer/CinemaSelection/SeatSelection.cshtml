@page
@using CinemaBooking.Enum
@model CinemaBooking.Pages.Customer.CinemaSelection.SeatSelectionModel
@{
    Layout = "/Pages/Shared/_UserLayout.cshtml";
    ViewData["Title"] = "Cinema Selection";
}
<!DOCTYPE html>
<html lang="zxx">

<head>
    <title>Movie Seat Selection Flat Responsive Widget Template :: w3layouts</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="utf-8">
    <meta name="keywords" content="Movie Seat Selection a Responsive Web Template, Bootstrap Web Templates, Flat Web Templates, Android Compatible Web Template, Smartphone Compatible Web Template, Free Webdesigns for Nokia, Samsung, LG, Sony Ericsson, Motorola Web Design">
    <link rel="stylesheet" href="~/customer/seat-selection-assets/css/style.css" type="text/css" media="all">
    <link href="//fonts.googleapis.com/css?family=Source+Sans+Pro:200,200i,300,300i,400,400i,600,600i,700,700i,900,900i" rel="stylesheet">
    <style>
        .seats {
            display: none; /* Hide default checkbox */
        }

        .checkmark {
            width: 20px;
            height: 20px;
            background-color: #eee;
            border-radius: 5px; /* Optional: rounded corners */
            display: inline-block; /* Inline block to allow space beside text */
            position: relative; /* For the checkmark positioning */
            cursor: pointer; /* Pointer cursor on hover */
        }

        /* Checkmark appearance when checked */
        .seats:checked + .checkmark {
            background-color: #28a745; /* Green background for selected */
        }

        /* Adding styles for reserved or unavailable seats */
        .unavailable + .checkmark {
            background-color: yellow; /* Yellow for unavailable */
        }

        .reserved + .checkmark {
            background-color: red; /* Red for reserved */
        }

        /* Optional: Change cursor for unavailable seats */
        .unavailable + .checkmark,
        .reserved + .checkmark {
            cursor: not-allowed; /* Not-allowed cursor */
        }

        /* Style for seat labels */
        .checkbox-label {
            margin-left: 5px; /* Space between checkbox and text */
            font-weight: bold; /* Make the text bold */
            color: #333; /* Change label color */
        }

        .agileits-left {
            display: flex;
            flex-direction: column;
        }

        .label-text {
            margin-bottom: 5px; /* Khoảng cách giữa label và input */
            font-weight: bold; /* Đậm hơn để nổi bật */
        }

        .w3ls-reg {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
        }

        .inputForm, .seat_w3ls, .seatStructure, .displayerBoxes {
            width: 100%;
            max-width: 800px; /* Tùy chỉnh theo độ rộng mong muốn */
            margin: 0 auto;
            padding: 20px;
            box-sizing: border-box;
        }

            .inputForm h2, .screen h2 {
                font-size: 1.5em;
                font-weight: bold;
                margin-bottom: 20px;
            }

        .mr_agilemain {
            display: flex;
            justify-content: space-between;
            gap: 20px; /* Khoảng cách giữa các khối */
        }

        .agileits-left, .agileits-right {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

            .agileits-left label, .agileits-right label {
                text-align: left; /* Giữ label ở sát bên trái */
                font-weight: bold;
                margin-bottom: 5px;
            }

        input[type="text"], input[type="number"] {
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
        }

        button {
            margin-top: 15px;
            padding: 10px 20px;
            font-size: 1em;
            font-weight: bold;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            button:hover {
                background-color: #45a049;
            }

        .seat_w3ls, .Displaytable {
            display: flex;
            justify-content: space-between;
            width: 100%;
            text-align: center;
            margin-top: 15px;
        }

            .Displaytable th, .Displaytable td {
                padding: 10px;
                border: 1px solid #ddd;
            }

        .Displaytable {
            border-collapse: collapse;
            width: 100%;
            margin-top: 20px;
        }

        textarea {
            width: 100%;
            resize: none;
            padding: 10px;
            box-sizing: border-box;
        }

        .screen {
            margin: 20px 0;
        }

        #seatsBlock {
            width: 100%;
            border-spacing: 10px; /* Tạo khoảng cách giữa các ghế */
        }

            #seatsBlock td {
                text-align: center;
            }

        .checkmark {
            display: inline-block;
            width: 20px;
            height: 20px;
            border-radius: 4px;
        }

        .screen h2 {
            font-size: 1.3em;
            font-weight: bold;
        }

        .txt-center {
            text-align: center;
        }

        .displayerBoxes {
            border: 1px solid #ddd; /* Light border around the box */
            border-radius: 8px; /* Rounded corners */
            padding: 20px; /* Padding inside the box */
            background-color: rgba(128, 128, 128, 0); /* Fully transparent background for the box */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
            margin-top: 20px; /* Margin above the box */
        }

        .Displaytable {
            width: 100%; /* Full width */
            border-collapse: collapse; /* Collapse borders */
            background-color: rgba(128, 128, 128, 0.34); /* Light gray background with transparency for the entire table */
        }

            .Displaytable th,
            .Displaytable td {
                border: 1px solid #ddd; /* Light border for cells */
                padding: 12px; /* Padding for table cells */
                text-align: left; /* Left-aligned text */
                background-color: rgba(128, 128, 128, 0.34); /* Light gray background with transparency for cells */
            }

            .Displaytable th {
                color: black; /* Header text color */
            }

        textarea {
            width: 100%; /* Full width for textareas */
            height: 50px; /* Fixed height for textareas */
            border: 1px solid #ccc; /* Border color */
            border-radius: 4px; /* Rounded corners */
            resize: none; /* Disable resizing */
            padding: 8px; /* Padding inside textarea */
            font-size: 14px; /* Font size */
        }

            textarea:focus {
                outline: none; /* Remove outline on focus */
                border-color: #4CAF50; /* Border color on focus */
            }

        #submitButton {
            display: inline-block; /* Ensure the button is treated as a block */
            background-color: #4CAF50; /* Button background color */
            color: white; /* Button text color */
            padding: 10px 15px; /* Button padding */
            border-radius: 5px; /* Rounded button corners */
            margin-top: 15px; /* Margin above button */
            text-align: center; /* Center text */
            border: none; /* Remove default border */
            cursor: pointer; /* Change cursor to pointer */
            transition: background-color 0.3s; /* Smooth background color change */
        }

            #submitButton:hover {
                background-color: #45a049; /* Darker green on hover */
            }


    </style>
</head>

<body>
    <h1>Movie Seat Selection</h1>
    <div class="container" style="display: flex; justify-content: space-between;">
        <!-- Left Block: User Input Form -->
        <div class="w3ls-reg" style="flex: 1; margin-right: 20px;">
            <div class="inputForm">
                <h2>Fill the required details below and select your seats</h2>
                <div class="mr_agilemain">
                    <div class="agileits-right">
                        <label>
                            Number of Seats
                            <span>*</span>
                        </label>
                        <input type="number" id="Numseats" required min="1">
                    </div>
                </div>
                <button id="startSelectingBtn">Start Selecting</button>
            </div>
            <ul class="seat_w3ls">
                <li class="smallBox greenBox">Selected Seat</li>
                <li class="smallBox redBox">Reserved Seat</li>
                <li class="smallBox emptyBox">Empty Seat</li>
            </ul>
            <div class="seatStructure txt-center" style="overflow-x:auto;">
                @{
                    var rowLabels = Enumerable.Range(0, Model.Showtime.Room.RoomType.NumberOfRow)
                    .Select(i => ((char)('A' + i)).ToString())
                    .ToArray();
                }

                <table id="seatsBlock">
                    <p id="notification"></p>
                    <tr>
                        <td></td>
                        @for (int i = 1; i <= Model.Showtime.Room.RoomType.NumberOfColumn; i++)
                        {
                            <td>@i</td>
                        }
                    </tr>

                    @foreach (var row in rowLabels)
                    {
                        <tr>
                            <td>@row</td>

                            @for (int column = 1; column <= Model.Showtime.Room.RoomType.NumberOfColumn; column++)
                            {
                                var seat = Model.Showtime.Room.Seats.FirstOrDefault(s => s.Row == row && s.Column == column);

                                if (seat != null)
                                {
                                    var checkboxColor = seat.Status switch
                                    {
                                        SeatStatus.Available => "white",
                                        SeatStatus.Unavailable => "yellow",
                                        SeatStatus.Reserved => "red",
                                        _ => "white"
                                    };

                                    var checkboxDisabled = seat.Status != SeatStatus.Available ? "disabled" : "";

                                    <td style="text-align: center;">
                                        <input type="checkbox" class="cinema-seats" value="@seat.SeatId" @checkboxDisabled
                                               title="Seat Status: @(seat.Status)" style="display: none;" data-row="@row" data-column="@column">
                                        <span class="checkmark" style="background-color: @(checkboxColor); cursor: pointer;" data-seat-id="@seat.SeatId"></span>
                                    </td>
                                }
                                else // Nếu ghế là null, tạo một ô trống
                                {
                                    <td style="text-align: center;"></td>
                                }
                            }
                        </tr>
                    }
                </table>

                <div class="screen">
                    <h2 class="wthree">Screen this way</h2>
                </div>
                <button id="confirmSelectionBtn">Confirm Selection</button>
            </div>
        </div>

        <!-- Right Block: Selected Seats Display -->
        <div class="displayerBoxes txt-center" style="flex: 1; overflow-x:auto;">
            <table class="Displaytable w3ls-table" width="100%">
                <tr>
                    <th>Seat Type</th>
                    <th>Number of Seats</th>
                    <th>Price</th>
                </tr>
                <tr>
                    <td>
                        <textarea id="typeDisplay" readonly></textarea>
                    </td>
                    <td>
                        <textarea id="numberDisplay" readonly></textarea>
                    </td>
                    <td>
                        <textarea id="priceDisplay" readonly></textarea>
                    </td>
                </tr>
            </table>
            <button id="submitButton" onclick="location.href='/Customer/Payment/Payment'">Continue</button>
        </div>
    </div>


    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Bắt sự kiện click vào các span có class 'checkmark'
            document.querySelectorAll("#seatsBlock .checkmark").forEach(span => {
                span.addEventListener("click", function () {
                    // Tìm checkbox đi kèm dựa vào data-row và data-column
                    const row = span.parentNode.querySelector("input").getAttribute("data-row");
                    const column = span.parentNode.querySelector("input").getAttribute("data-column");
                    const checkbox = span.parentNode.querySelector("input.cinema-seats");

                    if (checkbox && !checkbox.disabled) {
                        checkbox.checked = !checkbox.checked; // Đổi trạng thái chọn/bỏ chọn

                        // Đổi màu nền của span để thể hiện trạng thái đã chọn
                        if (checkbox.checked) {
                            span.style.backgroundColor = "#28a745"; // Màu xanh lá khi chọn
                        } else {
                            span.style.backgroundColor = "white"; // Trở lại màu ban đầu khi bỏ chọn
                        }

                        // Log ra console để kiểm tra
                        console.log(`Selected Seat at Row: ${row}, Column: ${column}, Checked: ${checkbox.checked}`);
                    } else {
                        // Log ra console nếu ghế không khả dụng
                        console.log(`Seat at Row: ${row}, Column: ${column} is not available.`);
                    }
                });
            });
        });
    </script>
</body>

</html>
