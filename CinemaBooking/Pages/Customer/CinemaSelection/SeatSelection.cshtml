@page "{showtimeId:int}"
@using CinemaBooking.Enum
@model CinemaBooking.Pages.Customer.CinemaSelection.SeatSelectionModel
@{
    Layout = "/Pages/Shared/_UserLayout.cshtml";
    ViewData["Title"] = "Cinema Selection";
}
@Html.AntiForgeryToken()
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
<!DOCTYPE html>
<html lang="zxx">

<head>
    <title>Movie Seat Selection Flat Responsive Widget Template :: w3layouts</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="utf-8">
    <meta name="keywords" content="Movie Seat Selection a Responsive Web Template, Bootstrap Web Templates, Flat Web Templates, Android Compatible Web Template, Smartphone Compatible Web Template, Free Webdesigns for Nokia, Samsung, LG, Sony Ericsson, Motorola Web Design">
    <link rel="stylesheet" href="~/customer/seat-selection-assets/css/style.css" type="text/css" media="all">
    <link href="//fonts.googleapis.com/css?family=Source+Sans+Pro:200,200i,300,300i,400,400i,600,600i,700,700i,900,900i" rel="stylesheet">
    <style>
        .seats {
            display: none; /* Hide default checkbox */
        }

        .checkmark {
            width: 20px;
            height: 20px;
            background-color: #eee;
            border-radius: 5px; /* Optional: rounded corners */
            display: inline-block; /* Inline block to allow space beside text */
            position: relative; /* For the checkmark positioning */
            cursor: pointer; /* Pointer cursor on hover */
        }

        /* Checkmark appearance when checked */
        .seats:checked + .checkmark {
            background-color: #28a745; /* Green background for selected */
        }

        /* Adding styles for reserved or unavailable seats */
        .unavailable + .checkmark {
            background-color: yellow; /* Yellow for unavailable */
        }

        .reserved + .checkmark {
            background-color: red; /* Red for reserved */
        }

        /* Optional: Change cursor for unavailable seats */
        .unavailable + .checkmark,
        .reserved + .checkmark {
            cursor: not-allowed; /* Not-allowed cursor */
        }

        /* Style for seat labels */
        .checkbox-label {
            margin-left: 5px; /* Space between checkbox and text */
            font-weight: bold; /* Make the text bold */
            color: #333; /* Change label color */
        }

        .label-text {
            margin-bottom: 5px; /* Khoảng cách giữa label và input */
            font-weight: bold; /* Đậm hơn để nổi bật */
        }

        .w3ls-reg {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
        }

        input[type="text"], input[type="number"] {
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
        }

        button {
            margin-top: 15px;
            padding: 10px 20px;
            font-size: 1em;
            font-weight: bold;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            button:hover {
                background-color: #45a049;
            }

        .seat_w3ls, .Displaytable {
            justify-content: space-between;
            width: 100%;
            text-align: center;
            margin-top: 15px;
        }

            .Displaytable th, .Displaytable td {
                padding: 10px;
                border: 1px solid #ddd;
            }

        .Displaytable {
            border-collapse: collapse;
            width: 100%;
            margin-top: 20px;
        }

        textarea {
            width: 100%;
            resize: none;
            padding: 10px;
            box-sizing: border-box;
        }

        .screen {
            margin: 20px 0;
        }

        #seatsBlock {
            width: 100%;
            border-spacing: 10px; /* Tạo khoảng cách giữa các ghế */
        }

            #seatsBlock td {
                text-align: center;
            }

        .checkmark {
            display: inline-block;
            width: 20px;
            height: 20px;
            border-radius: 4px;
        }

        .screen h2 {
            font-size: 1.3em;
            font-weight: bold;
        }

        .txt-center {
            text-align: center;
        }

        .displayerBoxes {
            border: 1px solid #ddd; /* Light border around the box */
            border-radius: 8px; /* Rounded corners */
            padding: 20px; /* Padding inside the box */
            background-color: rgba(128, 128, 128, 0); /* Fully transparent background for the box */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
            margin-top: 20px; /* Margin above the box */
        }

        .Displaytable {
            width: 100%; /* Full width */
            border-collapse: collapse; /* Collapse borders */
            background-color: rgba(128, 128, 128, 0.34); /* Light gray background with transparency for the entire table */
        }

            .Displaytable th,
            .Displaytable td {
                border: 1px solid #ddd; /* Light border for cells */
                padding: 12px; /* Padding for table cells */
                text-align: left; /* Left-aligned text */
                background-color: rgba(128, 128, 128, 0.34); /* Light gray background with transparency for cells */
            }

            .Displaytable th {
                color: white; /* Header text color */
                padding-bottom: 15px; /* Add space below the header */
            }

            .Displaytable tbody tr {
                transition: background-color 0.3s; /* Smooth transition for row hover effect */
            }

                .Displaytable tbody tr:hover {
                    background-color: rgba(0, 128, 0, 0.2); /* Highlight row on hover */
                }

        #submitButton {
            display: inline-block; /* Ensure the button is treated as a block */
            background-color: #4CAF50; /* Button background color */
            color: white; /* Button text color */
            padding: 10px 15px; /* Button padding */
            border-radius: 5px; /* Rounded button corners */
            margin-top: 15px; /* Margin above button */
            text-align: center; /* Center text */
            border: none; /* Remove default border */
            cursor: pointer; /* Change cursor to pointer */
            transition: background-color 0.3s; /* Smooth background color change */
        }

            #submitButton:hover {
                background-color: #45a049; /* Darker green on hover */
            }

        .seat_w3ls {
            display: flex;
            gap: 15px; /* Space between each legend item */
            padding: 0;
            list-style: none;
            margin-bottom: 10px; /* Space between rows */
        }

        .seat-legend {
            display: flex;
            align-items: center;
            gap: 5px; /* Space between icon and label */
        }

        .smallBox {
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            color: black; /* Set icon color to black for better visibility */
            border-radius: 3px;
            font-weight: bold;
            background-color: white; /* Set background color to white */
        }

        /* Borders for each seat type */
        .vipBox {
            border: 2px solid gold; /* Gold border for VIP */
        }

        .regularBox {
            border: 2px solid gray; /* Blue border for Standard */
        }

        .premiumBox {
            border: 2px solid blue; /* Green border for Economy */
        }

        /* Styles for other seat statuses */
        .greenBox {
            background-color: #28a745; /* Selected Seat */
            border: none;
        }

        .redBox {
            background-color: red; /* Reserved Seat */
            border: none;
        }

        .yellowBox {
            background-color: yellow; /* Pending Payment */
            border: none;
        }

        .emptyBox {
            background-color: #eee; /* Empty Seat */
            border: none;
        }

        .label {
            font-size: 14px;
            color: #fff;
            white-space: nowrap;
        }

        .legend-heading {
            font-size: 16px;
            font-weight: bold;
            color: #ffa500; /* Orange color for visibility */
            margin-top: 15px;
            margin-bottom: 5px;
        }

    </style>
</head>

<body>
    <h1>Movie Seat Selection</h1>
    <h1>@Model.Showtime.Room.RoomType.RoomTypeName ROOM</h1>
    <div class="container" style="justify-content: space-between;">
        <!-- Left Block: User Input Form -->
        <div class="w3ls-reg">
            <div class="inputForm">
                <h2>Please select your seat, up to 5 seats</h2>
            </div>
            <!-- First Row: General Seat Status -->
            <h3 class="legend-heading">Seat Status</h3>
            <ul class="seat_w3ls">
                <li class="seat-legend">
                    <span class="smallBox greenBox"></span>
                    <span class="label">Selected Seat</span>
                </li>
                <li class="seat-legend">
                    <span class="smallBox redBox"></span>
                    <span class="label">Reserved Seat</span>
                </li>
                <li class="seat-legend">
                    <span class="smallBox yellowBox"></span>
                    <span class="label">Pending Payment</span>
                </li>
                <li class="seat-legend">
                    <span class="smallBox emptyBox"></span>
                    <span class="label">Empty Seat</span>
                </li>
            </ul>

            <!-- Second Row: Seat Types -->
            <h3 class="legend-heading">Seat Type</h3>
            <ul class="seat_w3ls">
                <li class="seat-legend">
                    <span class="smallBox vipBox">★</span> 
                    <span class="label">VIP Seat</span>
                </li>
                <li class="seat-legend">
                    <span class="smallBox premiumBox">■</span> 
                    <span class="label">Premium Seat</span>
                </li>
                <li class="seat-legend">
                    <span class="smallBox regularBox">●</span> 
                    <span class="label">Regular Seat</span>
                </li>         
            </ul>
            <div class="seatStructure txt-center" style="overflow-x:auto;">
                @{
                    var rowLabels = Enumerable.Range(0, Model.Showtime.Room.RoomType.NumberOfRow)
                    .Select(i => ((char)('A' + i)).ToString())
                    .ToArray();
                }

                <table id="seatsBlock">
                    <p id="notification"></p>
                    <tr>
                        <td></td>
                        @for (int i = 1; i <= Model.Showtime.Room.RoomType.NumberOfColumn; i++)
                        {
                            <td>@i</td>
                        }
                    </tr>

                    @foreach (var row in rowLabels)
                    {
                        <tr>
                            <td>@row</td>

                            @for (int column = 1; column <= Model.Showtime.Room.RoomType.NumberOfColumn; column++)
                            {
                                var seat = Model.Showtime.Room.Seats.FirstOrDefault(s => s.Row == row && s.Column == column);

                                if (seat != null)
                                {
                                    var seatPrice = seat.SeatType.SeatPrice;
                                    var seatType = seat.SeatType.SeatTypeName;
                                    var checkboxColor = seat.Status switch
                                    {
                                        SeatStatus.Available => "white",
                                        SeatStatus.Unavailable => "yellow",
                                        SeatStatus.Reserved => "red",
                                        _ => "white"
                                    };

                                    // Set border style and color based on seat type
                                    var borderStyle = seatType switch
                                    {
                                        "VIP" => "3px solid gold",
                                        "Standard" => "3px solid gray",
                                        "Premium" => "3px solid blue",
                                        _ => "3px solid gray"
                                    };

                                    var checkboxDisabled = seat.Status != SeatStatus.Available ? "disabled" : "";

                                    <td style="text-align: center;">
                                        <input type="checkbox" class="cinema-seats" value="@seat.SeatId" @checkboxDisabled
                                               title="Seat Status: @(seat.Status)" style="display: none;"
                                               data-row="@row" data-column="@column"
                                               data-seat-price="@seatPrice" data-seat-type="@seatType">
                                        <span class="checkmark" style="background-color: @(checkboxColor); cursor: pointer; border: @(borderStyle);"
                                              data-seat-id="@seat.SeatId"
                                              data-seat-price="@seatPrice" data-seat-type="@seatType"></span>
                                    </td>
                                }
                                else // Nếu ghế là null, tạo một ô trống
                                {
                                    <td style="text-align: center;"></td>
                                }
                            }

                        </tr>
                    }
                </table>

                <div class="screen">
                    <h2 class="wthree">Screen this way</h2>
                </div>
            </div>
        </div>

        <!-- Right Block: Selected Seats Display -->
        <div class="displayerBoxes txt-center" style="flex: 1; overflow-x: auto;">
            <div class="inputForm">
                <h2>Selection Seats Information</h2>
            </div>
    
            <form method="post" asp-page-handler="ConfirmSelection">
                <table class="Displaytable w3ls-table" width="100%">
                    <thead>
                        <tr>
                            <th style="width: 33%;">Seat Type</th>
                            <th style="width: 33%;">Number of Seats</th>
                            <th style="width: 33%;">Price</th>
                        </tr>
                    </thead>
                    <tbody id="seatsInfoBody">
                        <!-- Rows will be dynamically added here -->
                    </tbody>
                    <tfoot>
                        <tr class="total-price">
                            <td colspan="2">Total Price:</td>
                            <td id="totalPrice">0.00 VND</td>
                        </tr>
                    </tfoot>
                </table>

                <!-- Hidden fields for account ID, showtime ID, ticket price, and selected seat IDs -->
                <input type="hidden" name="AccountId" value="@Model.AccountId" />
                <input type="hidden" name="ShowtimeId" value="@Model.Showtime.ShowtimeId" />
                <input type="hidden" name="TicketPrice" id="ticketPriceInput" value="0.00" />
                <input type="hidden" name="SeatIds" id="seatIdsInput" value="" />

                <button type="submit" id="confirmSelectionBtn">Confirm Selection</button>
            </form>
        </div>
    </div>
    @{
        // Retrieve the movieId from TempData
        var movieId = TempData["MovieId"] as int?;
        var backUrl = $"/Customer/CinemaSelection/CinemaSelection/{movieId}";
    }

    <!-- External Back Button -->
    <div style="text-align: center; margin: 20px 0;">
        <a href="@backUrl">
            <button type="button" style="padding: 10px 20px; font-size: 16px; background-color: #555; color: white; border: none; border-radius: 5px; cursor: pointer;">
                Back
            </button>
        </a>
    </div>

    <!-- Popup Modal HTML for Error Message -->
    <div id="errorModal" class="modal" tabindex="-1" role="dialog" style="display: none;">
        <div class="modal-dialog" role="document">
            <div class="modal-content" style="border-radius: 10px; overflow: hidden; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);">
                <div class="modal-header" style="background-color: #f44336; color: white; padding: 15px;">
                    <h5 class="modal-title" style="margin: 0; font-weight: bold;">Notification</h5>
                    <button type="button" class="close" onclick="closeErrorModal()" aria-label="Close" style="background-color: #4CAF50; color: white; border: none; border-radius: 50%; width: 30px; height: 30px; font-size: 18px; display: flex; align-items: center; justify-content: center;">
                        &times;
                    </button>
                </div>
                <div class="modal-body" style="padding: 20px; font-size: 16px; text-align: center;">
                    <p>No seats available for this showtime.</p>
                </div>
                <div class="modal-footer" style="justify-content: center; padding: 15px; border-top: none;">
                    <button type="button" class="btn btn-secondary" onclick="goBack()" style="padding: 10px 20px; font-size: 16px; background-color: #555; color: white; border: none; border-radius: 5px; cursor: pointer;">
                        Back
                    </button>
                </div>
            </div>
        </div>
    </div>

   <script>
    document.addEventListener("DOMContentLoaded", function () {
        const selectedSeats = [];
        let selectedSeatIds = []; // Declare this globally

        // Function to update the selection information
        function updateSelectionInfo() {
            const seatCounts = {};
            let totalPrice = 0; // Initialize total price

            selectedSeats.forEach(seat => {
                const seatType = seat.type;
                const seatPrice = seat.price;

                // Count seats by type and calculate total price
                if (!seatCounts[seatType]) {
                    seatCounts[seatType] = { count: 0, totalPrice: 0 };
                }
                seatCounts[seatType].count++;
                seatCounts[seatType].totalPrice += seatPrice;
                totalPrice += seatPrice; // Add to total price
            });

            // Update the seats info table
            const seatsInfoBody = document.getElementById("seatsInfoBody");
            seatsInfoBody.innerHTML = ""; // Clear previous rows

            // Add rows for each seat type
            for (const [type, info] of Object.entries(seatCounts)) {
                const row = document.createElement("tr");

                const typeCell = document.createElement("td");
                typeCell.textContent = type;

                const countCell = document.createElement("td");
                countCell.textContent = info.count;

                const priceCell = document.createElement("td");
                priceCell.textContent = `${info.totalPrice.toFixed(2)} VND`; // Format price

                row.appendChild(typeCell);
                row.appendChild(countCell);
                row.appendChild(priceCell);
                seatsInfoBody.appendChild(row);
            }

            // Update the total price display
            document.getElementById("totalPrice").textContent = `${totalPrice.toFixed(2)} VND`;

            // Update hidden fields before submission
            document.getElementById("ticketPriceInput").value = totalPrice.toFixed(2);

            // Convert selectedSeatIds to an array of integers
            const selectedSeatIdsAsInts = selectedSeatIds.map(id => parseInt(id, 10));

            // Set the input field value to a comma-separated string of integers
            document.getElementById("seatIdsInput").value = selectedSeatIdsAsInts.join(',');
        }

        // Event listener for each seat checkbox
        document.querySelectorAll("#seatsBlock .checkmark").forEach(span => {
            span.addEventListener("click", function () {
                const checkbox = span.previousElementSibling; // Get the corresponding checkbox
                const seatId = checkbox.value;
                const seatType = checkbox.getAttribute("data-seat-type");
                const seatPrice = parseFloat(checkbox.getAttribute("data-seat-price"));

                if (checkbox && !checkbox.disabled) {
                    checkbox.checked = !checkbox.checked; // Toggle checkbox state

                    if (checkbox.checked) {
                        // Limit selection to 5 seats
                        if (selectedSeats.length < 5) {
                            span.style.backgroundColor = "#28a745"; // Selected color
                            selectedSeats.push({ id: seatId, type: seatType, price: seatPrice });
                            selectedSeatIds.push(seatId); // Add to selectedSeatIds
                        } else {
                            alert("You can select a maximum of 5 seats.");
                            checkbox.checked = false; // Uncheck if limit exceeded
                        }
                    } else {
                        const index = selectedSeats.findIndex(seat => seat.id === seatId);
                        if (index > -1) {
                            selectedSeats.splice(index, 1); // Remove from selectedSeats
                            selectedSeatIds = selectedSeatIds.filter(id => id !== seatId); // Remove from selectedSeatIds
                        }
                        span.style.backgroundColor = ""; // Reset color
                    }

                    updateSelectionInfo(); // Update the displayed selection info after changes
                }
            });
        });
    });

        // Function to go back to the previous page
        function goBack() {
            window.history.back();
        }

        // Show the error modal if TempData["ErrorMessage"] is not null
        @if (TempData["ErrorMessage"] != null)
        {
            <text>
                    document.addEventListener("DOMContentLoaded", function() {
                        document.getElementById('errorModal').style.display = 'block';
                        });
            </text>
        }
</script>

</body>
</html>
